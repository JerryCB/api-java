package com.groupbyinc.api.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.groupbyinc.api.parser.Model;

import java.util.Map;

/**
 * <code>
 * A Record represents a result from the GSA.
 * Each record has all the requested metadata as
 * specified in fields parameter.  Each record also has several special fields.
 * <p/>
 * - id: an MD5 hash of the unique URL of this record.
 * - url: the unique url of the record.
 * - snippet: If there is a keyword match, the snippet of text.  Matches have &lt;b&gt; tags surrounding them.
 * - title: The title of the record.
 * - allMeta: a map of key value pairs.  If a value is multi-assign, there will additionally be a &lt;key&gt;List
 * item, with
 * all the values.
 * </code>
 *
 * @author will
 */
public class RecordBase extends Model {
    private static final long serialVersionUID = 1L;

    @JsonProperty("_id")
    private String id;
    @JsonProperty("_u")
    private String url;
    @JsonProperty("_snippet")
    private String snippet;
    @JsonProperty("_t")
    private String title;
    private Map<String, Object> allMeta;

    /**
     * <code>
     * Default constructor
     * </code>
     */
    public RecordBase() {
        // default constructor
    }

    /**
     * @return The ID is generated from URL of this record which means it will
     * persist across updates.
     */
    public String getId() {
        return id;
    }

    /**
     * @param pId
     *         Set the id
     *
     * @return
     */
    public RecordBase setId(String pId) {
        id = pId;
        return this;
    }

    /**
     * <code>
     * This URL is generated by the stream tool and follows the format
     * <p/>
     * http://<customerId>1<collection>.com/<id>.html
     * </code>
     *
     * @return The URL represents the Unique ID of the record.
     */
    public String getUrl() {
        return url;
    }

    /**
     * @param pUrl
     *         Set the record url
     *
     * @return
     */
    public RecordBase setUrl(String pUrl) {
        url = pUrl;
        return this;
    }

    /**
     * @return If a search was performed this result object may have a snippet
     * of matching text.
     */
    public String getSnippet() {
        return snippet;
    }

    /**
     * @param pSnippet
     *         Set the snippet
     *
     * @return
     */
    public RecordBase setSnippet(String pSnippet) {
        snippet = pSnippet;
        return this;
    }

    /**
     * @param pName
     *         Get a specific metadata value. Essentially this represents an
     *         attribute of the record data.
     *
     * @return
     */
    public Object getMetaValue(String pName) {
        return allMeta.get(pName);
    }

    /**
     * @return A map of all the metadata associated with this record.
     */
    public Map<String, Object> getAllMeta() {
        return allMeta;
    }

    /**
     * @param pAllMeta
     *         Set the metadata.
     *
     * @return
     */
    public RecordBase setAllMeta(Map<String, Object> pAllMeta) {
        allMeta = pAllMeta;
        return this;
    }

    /**
     * <code>
     * This will represent whatever is set in
     * the &lt;title&gt; tag of your defaultTemplate.vm
     * </code>
     *
     * @return The title of this record.
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param pTitle
     *         Set the title
     */
    public RecordBase setTitle(String pTitle) {
        title = pTitle;
        return this;
    }
}
